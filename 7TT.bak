#lang racket
(require rackunit)



(define (my-map func lst)    ;nur fuer funktioen mit einem Argument
  (cond[(empty? lst) empty]
       [else (cons (func (first lst))
                   (my-map func (rest lst)))]))

(define (my-foldr func base lst) ;nur fuer funktioen mit ZWEI Argumenten
  (cond [(empty? lst) base]
        [else (func (first lst) (my-foldr func base (rest lst)))]))

(define (my-foldl func base lst) ;nur fuer funktioen mit ZWEI Argumenten
  (cond [(empty? lst) base]
        [else (my-foldl func (func (first lst) base) (rest lst))]))
;.............................^----new base--------^

(define (my-filter pred lst)
  (cond[(empty? lst) empty]
       [(pred (first lst))
              (cons (first lst) (my-filter pred (rest lst)))]
       [else (my-filter pred (rest lst))]))
                      
(define (my-ormap pred lst)
  (cond[(empty? lst) #f]
       [(pred (first lst)) #t]
       [else (my-ormap pred (rest lst))]))

(define (my-andmap pred lst)
  (cond [(empty? lst) #t]
        [else (and (pred (first lst))
                   (my-andmap pred (rest lst)))]))

;Tests
(define testliste '(2 2 3 4))
(check-equal? (my-map add1 testliste) '(3 3 4 5))
(check-equal? (my-foldr + 0 testliste) 11)



             